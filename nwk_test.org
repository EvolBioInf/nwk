#+begin_src latex
  \section{Testing}
  Our testing framework has hooks for imports and the testing logic.
#+end_src
#+begin_src go <<nwk_test.go>>=
  package nwk

  import (
	  "testing"
	  //<<Testing imports>>
  )

  func TestNewick(t *testing.T) {
	  //<<Testing>>
  }
#+end_src
#+begin_src latex
  We open the file \ty{test.nwk} and scan the two trees it
  contains. They should both be identical to the tree we want.
#+end_src
#+begin_src go <<Testing>>=
  in := "test.nwk"
  f, err := os.Open(in)
  if err != nil {
	  t.Errorf("couldn't open %q", in)
  }
  defer f.Close()
  sc := NewScanner(f)
  want := `(((A:0.2,B:0.3):0.3,(D:0.5,E:0.3):0.2):0.3,F:0.7);`
  //<<Scan trees>>
#+end_src
#+begin_src latex
  We import \ty{os} and \ty{fmt}.
#+end_src
#+begin_src go <<Testing imports>>=
  "os"
#+end_src
#+begin_src latex
  We compare the trees we get with the one we want.
#+end_src
#+begin_src go <<Scan trees>>=
  var root *Node
  for sc.Scan() {
	  root = sc.Tree()
	  get := root.String()
	  if get != want {
		  t.Errorf("get:\n%s\nwant:\n%s\n",
			  get, want)
	  }
  }
#+end_src
#+begin_src latex
  We label the tree uniformly to get Figure~\ref{fig:nwk}. Then we check
  the newly labeled tree.
  \begin{figure}
    \begin{center}
      \includegraphics{nwk}
      \end{center}
    \caption{Uniformly labeled version of the testing
      tree.}\label{fig:nwk}
  \end{figure}
#+end_src
#+begin_src go <<Testing>>=
  root.UniformLabels("n")
  want = `(((n13:0.2,n14:0.3)n12:0.3,` +
	  `(n16:0.5,n17:0.3)n15:0.2)n11` +
	  `:0.3,n18:0.7)n10;`
  get := root.String()
  if get != want {
	  t.Errorf("get:\n%s\nwant:\n%s",
		  get, want)
  }
#+end_src
#+begin_src latex
  We find a lowest common ancestor of n13 and n16 in
  Figure~\ref{fig:nwk}.
#+end_src
#+begin_src go <<Testing>>=
  n1 := root.Child.Child.Child
  n2 := root.Child.Child.Sib.Child
  l1 := n1.LCA(n2)
  l2 := n2.LCA(n1)
  if l1.Id != l2.Id || l1.Id != 11 {
	  t.Errorf("get:\n%d\nwant:\n%d",
		  l1.Id, 11)
  }
#+end_src
#+begin_src latex
  We measure the \ty{UpDistance} between n13 and the root.
#+end_src
#+begin_src go <<Testing>>=
  ud := n1.UpDistance(root)
  if ud != 0.8 {
	  t.Errorf("get:\n%g\nwant:\n%g", ud, 0.8)
  }
#+end_src
#+begin_src latex
  We make a new node and add it as a child to the root.
#+end_src
#+begin_src go <<Testing>>=
  ch := NewNode()
  ch.Label = "new"
  root.AddChild(ch)
  get = root.String()
  ot := want
  want = `(((n13:0.2,n14:0.3)n12:0.3,` +
	    `(n16:0.5,n17:0.3)n15:0.2)n11` +
	    `:0.3,n18:0.7,new)n10;`
  if get != want {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
#+begin_src latex
  We remove the child again.
#+end_src
#+begin_src go <<Testing>>=
  root.RemoveChild(ch)
  get = root.String()
  want = ot
  if get != want {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
#+begin_src latex
  We print the nodes.
#+end_src
#+begin_src go <<Testing>>=
  get = root.Print()
  want = "n10\n   n18\n   n11\n      n15\n         n17\n" +
	  "         n16\n      n12\n         n14\n         n13\n"
  if get != want {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
#+begin_src latex
  We also test the \ty{Key} method on the root.
#+end_src
#+begin_src go <<Testing>>=
  want = "n10$n11$n12$n13$n14$n15$n16$n17$n18"
  get = root.Key("$")
  if get != want {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
